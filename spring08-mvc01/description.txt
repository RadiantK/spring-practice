## Servlet 매핑에서 /와 /* 차이

"/"로 시작하고 "/*"로 끝나는 패턴은 path로 인식
"*."으로 시작하는 경우 확장자 매칭
"/"만 정의한 경우 디폴트 서블릿 의미
그 외의 경우 동치 매칭

/*는 요청 받는 모든 URL을 처리
/user/list
/user/list.do
/user/userList.jsp
/img/test.png

/*는 들어오는 모든 url 패턴을 처리 한다.
/ 는  모든 url-mapping을 통틀어 비교하여도 매칭이 안되는 녀석을 처리 한다
'/'  으로 mapping 된 servlet 이 없다면 defaultServlet이 처리


/* 로 지정하면 모든 요청을 DispatcherServlet에서 처리하겠다고 지정한 것이므로 
jsp에 대한 호출도 DispatcherServlet이 처리하려고 하기때문에 404발생.
그러므로 url pattern을 **” / ”** 로 적용해야 한다.



**디폴트 서블릿은 서블릿 매핑 URL에 걸리지 않는 요청들을 처리**
- tomcat 서블릿 컨테이너
.jsp, *.jspx와 같은 url 패턴은 JspServlet이 처리하고,
 DefaultServlet은 spring Controller mapping과 jsp 패턴에 
 걸리지 않는 요청 들을 처리한다는 결론이 나온다.
즉, DefaultServlet은 png, jpg, js, html등 정적인 content를 처리한다는 말이다.
정리하면
http://localhost:8080/user/userList.jsp <- JspServlet 요청 처리
http://localhost:8080/img/button.jpg <- DefaultServlet 요청 처리
http://localhost:8080/user/list <- DispatcherServlet 요청 처리
하지만 url-pattern을 /로 설정하면 컨트롤러의 url 요청(main/list  main/hello)는
 정상적으로 동작하는데 정적요청 .jpg .html .css등으로 호출할 때 404에러가 발생한다.
로그를 보면 *.jpg 호출 시 DefaultServlet이 처리하는 것이 아닌 
DispatcherServlet이 처리를 하게 되는 것을 볼 수 있다.
당연히 DispatcherServlet이 처리를 하게 되면 
controller mapping URL이 존재하지 않으니 404 오류가 발생한다.
**DispatcherServlet은 url-pattern을 "/" 와 같이 설정하게 되면서
 tomcat의 server.xml에 정의되어 있는 url-pattern "/"을 무시하기 때문이다.**
configureDefaultServletHandling을 정의하면 DefaultServletHttpRequestHandler가 하는 역할은
 DispatcherServlet이 처리 못하는 매핑 url을 DefaultServlet으로 넘기는 것이다.



*.jsp는 톰캣안에 매핑되어있는데 defaultServlet도 매핑되어있다.
그래서 defaultServlet를 재정의하면 내장된 매핑보다 우선적으로 적용된다.(dispather가 먼저적용)
DispatcherSerlvet이 처리하지 못한 요청을 DefaultSerlvet에게 넘겨주는 역할을 하는 핸들러
*.css와 같은 컨트롤러에 매핑되어 있지 않은 URL요청은 최종적으로 DefaultServlet에 전달되어 처리하는 역할
DispatcherServlet의 매핑이 "/"로 지정하면 JSP를 제외한 모든 요청이 DispatcherServlet으로
가기 때문에, WAS가 제공하는 Default Servlet이 *.html, *.css같은 요청을 처리할 수 없게됨.
DefaultServletHandler는 이런 요청들을 DefaultServlet에게 전달해주는 Handler이다.
요청 URL에 매핑되는 컨트롤러가 존재하지 않을 때, 404응답 대신,
DefaultServlet이 해당 요청 URL을 처리하도록 함.
@Override
public void configureDefaultServletHandling(
DefaultServletHandlerConfigurer configurer) {
configurer.enable();
}



**/* Dispathcher servlet을 /*으로 했을때의 문제**
/*으로 매핑하였을 경우에 모든 매핑 패턴에 대해 매핑되어서 
.jsp, .html 등 이런 요소들에 대한 매핑이 되지 않을 수 있다.

※ 오류내용
No mapping found for HTTP request with URI [/WEB-INF/jsp/article.jsp] 
in DispatcherServlet with name 'dispatcher

그래서 이를 해결 하기 위해서는 dispatcher servlet의 url-pattern별을  /으로 변경하여야 한다.
 그렇게 되면 *.jsp, *.html 과 같은 패턴이 jspServerlet등에서 처리를 다하고,
 넘어오는 요청에 대해서 Default Servlet이 잡아서 이를 처리하게하는 것이다.
DispatcherServlet에 / url-pattern을 지정하면서
tomcat의 server.xml에 /를 무시하기 때문에 정적 요소들에 대한 접근이 되지 않는 경우가 있을 수 있다.
그 이유는 /wedul/picture.jpg와 같은 요청이
@Controller에 정의 되어 있지 않는 경우 매핑될 곳이 없기 때문이다.
이를 해결하기 위해서는 다음 xml을 적어주면된다.
<mvc:default-servlet-handler />



# **커맨드 객체(Command Object)**

커맨드 객체(Command Object) 란 HttpServletRequest 를 통해 들어온 요청 파라미터들을 
setter 메서드를 이용하여 객체에 정의되어있는 속성에 바인딩이 되는 객체를 의미합니다.

커맨드 객체는 보통 DTO 를 의미하며, HttpServletRequest 로 받아오는 요청 파라미터의 
`key 값과 동일한 이름`의 `속성`들과 `setter 메서드`를 가지고 있어야 합니다.

어떻게 자동으로 바인딩을 시켜주냐 하면, 스프링이 내부적으로 HttpServletRequest와 
커맨드 객체의 setter 메서드를 이용하여 알아서 바인딩 시켜줍니다.